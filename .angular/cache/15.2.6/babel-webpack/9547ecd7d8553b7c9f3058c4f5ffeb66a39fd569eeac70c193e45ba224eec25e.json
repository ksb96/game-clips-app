{"ast":null,"code":"import * as i0 from \"@angular/core\";\n// will search for a ID of a modal\nexport class ModalService {\n  register(id) {\n    this.modals.push({\n      id,\n      visible: false\n    });\n    console.log(this.modals);\n  }\n  isModalOpen(id) {\n    return Boolean(this.modals.find(element => element.id === id)?.visible);\n    // return !!this.modals.find(element => element.id === id)?.visible\n  }\n  // is there any modal??\n  toggleModal(id) {\n    const modal = this.modals.find(element => element.id === id);\n    if (modal) {\n      modal.visible = !modal.visible;\n    }\n  }\n  constructor() {\n    this.modals = [];\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAWA;AACA,OAAM,MAAOA,YAAY;EAGvBC,QAAQ,CAACC,EAAU;IACjB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfF,EAAE;MACFG,OAAO,EAAE;KACV,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,MAAM,CAAC;EAC1B;EAEAK,WAAW,CAACN,EAAU;IACpB,OAAOO,OAAO,CAAC,IAAI,CAACN,MAAM,CAACO,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACT,EAAE,KAAKA,EAAE,CAAC,EAAEG,OAAO,CAAC;IACvE;EACF;EAEA;EACAO,WAAW,CAACV,EAAS;IACnB,MAAMW,KAAK,GAAG,IAAI,CAACV,MAAM,CAACO,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACT,EAAE,KAAKA,EAAE,CAAC;IAE5D,IAAGW,KAAK,EAAC;MACPA,KAAK,CAACR,OAAO,GAAG,CAACQ,KAAK,CAACR,OAAO;;EAElC;EAEAS;IAxBQ,WAAM,GAAa,EAAE;EAwBb;;AAzBLd,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAe,SAAZf,YAAY;EAAAgB,YAJX;AAAM","names":["ModalService","register","id","modals","push","visible","console","log","isModalOpen","Boolean","find","element","toggleModal","modal","constructor","factory","providedIn"],"sourceRoot":"","sources":["D:\\Courses\\prjs\\angular-local\\clips-app\\game-clips-app\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ninterface IModal {\n  id: string;\n  visible: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// will search for a ID of a modal\nexport class ModalService {\n  private modals: IModal[] = []\n\n  register(id: string) {\n    this.modals.push({\n      id,\n      visible: false\n    })\n    console.log(this.modals)\n  }\n\n  isModalOpen(id: string): Boolean {\n    return Boolean(this.modals.find(element => element.id === id)?.visible);\n    // return !!this.modals.find(element => element.id === id)?.visible\n  }\n\n  // is there any modal??\n  toggleModal(id:string) {\n    const modal = this.modals.find(element => element.id === id)\n\n    if(modal){\n      modal.visible = !modal.visible\n    }\n  }\n\n  constructor() { }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}